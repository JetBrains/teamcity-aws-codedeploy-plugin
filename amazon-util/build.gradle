/*
 * Copyright 2000-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'

ext.teamcityVersion = hasProperty('teamcity.version') ? property('teamcity.version') : '10.0.4'

ext.teamcityDir = hasProperty('teamcity.dir') ? property('teamcity.dir') : "$rootDir/teamcity/servers/TeamCity-${teamcityVersion}"
ext.teamcityDataDir = "$rootDir/teamcity/data/" + teamcityVersion
ext.teamcityJavaHome = System.properties['java.home']

ext.awsSDKVersion = hasProperty('aws.sdk.version') ? property('aws.sdk.version') : '1.11.475'

ext.buildNumber = project.hasProperty('build.number') ? project.property('build.number') : 'SNAPSHOT-' + new Date().format('yyyyMMddHHmm')
ext.mavenGroupId = 'jetbrains.buildServer.util'
ext.mavenArtifactId = 'amazon-util'

ext.mavenArtifactsPath = hasProperty('maven.artifacts.path') ? property('maven.artifacts.path') : "$libsDir"
ext.defaultPomFile = "$mavenPomDir/amazon-util-pom.xml"
ext.pomFile = hasProperty('maven.pom.file') ? property('maven.pom.file') : "$defaultPomFile"
ext.mavenRepository = hasProperty('maven.repository') ? property('maven.repository') : ''
ext.mavenRepositoryUser = hasProperty('maven.repository.user') ? property('maven.repository.user') : ''
ext.mavenRepositoryPassword = hasProperty('maven.repository.password') ? property('maven.repository.password') : ''

sourceCompatibility = "1.6"
targetCompatibility = "1.6"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useTestNG()

    systemProperty 'aws.access.key.id', project.hasProperty('aws.access.key.id') ? project.property('aws.access.key.id') : ''
    systemProperty 'secure:aws.secret.access.key', project.hasProperty('secure:aws.secret.access.key') ? project.property('secure:aws.secret.access.key') : ''

    testLogging.showStandardStreams = true
}

idea {
    project {
        vcs = 'Git'
    }
}

repositories {
    mavenCentral()
    maven {
        url = 'https://repository.jetbrains.com/all'
    }
}

configurations {
    ftpDeployer
    mavenArtifacts
}

dependencies {
    compile "com.amazonaws:aws-java-sdk-codedeploy:${awsSDKVersion}"
    compile "com.amazonaws:aws-java-sdk-codepipeline:${awsSDKVersion}"
    compile "com.amazonaws:aws-java-sdk-s3:${awsSDKVersion}"
    compile "com.amazonaws:aws-java-sdk-sts:${awsSDKVersion}"
    compile "com.amazonaws:aws-java-sdk-codebuild:${awsSDKVersion}"

    compileOnly "org.jetbrains.teamcity:common-api:${teamcityVersion}"
    // the dependencies can be removed since 10.0, see https://youtrack.jetbrains.com/issue/TW-44615
    compileOnly files("${teamcityDir}/buildAgent/lib/common-impl.jar")

    testCompile "org.jetbrains.teamcity:tests-support:${teamcityVersion}"

    ftpDeployer "org.apache.maven.wagon:wagon-ftp:2.2"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveName 'amazon-util-sources.jar'
}

task writePom {
    doLast {
        pom {
            project {
                groupId "$mavenGroupId"
                artifactId "$mavenArtifactId"
                version "$buildNumber"
            }
        }
        .whenConfigured{ pom -> pom.dependencies.removeAll { it.scope.contains('test') } }
        .writeTo("$defaultPomFile")
    }
}

task prepareArtifacts {
    doLast {
        artifacts.mavenArtifacts file: file("$mavenArtifactsPath/amazon-util.jar"), name: 'amazon-util', type: 'jar'
        artifacts.mavenArtifacts file: file("$mavenArtifactsPath/amazon-util-sources.jar"), name: 'amazon-util-sources', type: 'jar', classifier: 'sources'
    }
}

task readPom {
    doLast {
        def root = new XmlParser().parse(file("$pomFile"))

        def sw = new StringWriter()
        def printer = new XmlNodePrinter(new PrintWriter(sw))
        printer.preserveWhitespace = true
        printer.print(root)

        readPom.ext.result = sw.toString()
    }
}

task prepareUploadMavenArtifactsTask {
    dependsOn tasks.prepareArtifacts
    dependsOn tasks.readPom

    doFirst {
        tasks.uploadMavenArtifacts.repositories.mavenDeployer {
            configuration = configurations.ftpDeployer

            repository(url: "$mavenRepository") {
                authentication(userName: "${mavenRepositoryUser}", password: "${mavenRepositoryPassword}")
            }

            addFilter('amazon-util') {artifact, file ->
                artifact.name == 'amazon-util'
            }.withXml { provider ->
                def builder = provider.asString()
                builder.length = 0
                builder << tasks.readPom.result
            }

            addFilter('amazon-util-sources') {artifact, file ->
                artifact.name == 'amazon-util-sources'
            }.withXml { provider ->
                def builder = provider.asString()
                builder.length = 0
                builder << tasks.readPom.result
            }
        }
    }

    tasks.uploadMavenArtifacts.dependsOn tasks.prepareUploadMavenArtifactsTask
}